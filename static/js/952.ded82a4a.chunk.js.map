{"version":3,"file":"static/js/952.ded82a4a.chunk.js","mappings":"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","sources":["components/MusicPlayer.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport {\n  MdPlayArrow,\n  MdPause,\n  MdSkipNext,\n  MdSkipPrevious,\n  MdVolumeUp,\n  MdVolumeDown,\n  MdVolumeMute,\n} from \"react-icons/md\";\nimport \"../styles/MusicPlayer.css\";\n\nimport BoleritoStapelia from \"../assets/music/Bolerito de Stapelia.mp3\";\nimport Frio from \"../assets/music/Frio.mp3\";\nimport Girasoles from \"../assets/music/Girasoles.mp3\";\nimport Limonero from \"../assets/music/Limonero.mp3\";\nimport MariposaOrigami from \"../assets/music/Mariposa Origami.mp3\";\nimport Oceanica from \"../assets/music/Oceanica.mp3\";\n\nimport { motion } from \"framer-motion\";\n\nconst MusicPlayer = () => {\n  const audioRef = useRef(null);\n  const volumeSliderRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\n  const [currentSong, setCurrentSong] = useState({});\n  const [progress, setProgress] = useState(0);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const [volume, setVolume] = useState(100);\n  const [isVolumeSliderVisible, setIsVolumeSliderVisible] = useState(false);\n\n  const songs = useMemo(\n    () => [\n      { title: \"Bolerito de Stapelia\", source: BoleritoStapelia },\n      { title: \"Frio\", source: Frio },\n      { title: \"Girasoles\", source: Girasoles },\n      { title: \"Limonero\", source: Limonero },\n      { title: \"Mariposa Origami\", source: MariposaOrigami },\n      { title: \"Oceanica\", source: Oceanica },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    audioRef.current.src = songs[currentSongIndex].source;\n    setCurrentSong(songs[currentSongIndex]);\n  }, [currentSongIndex, songs]);\n\n  const handlePlayPause = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleNextSong = () => {\n    const nextIndex = (currentSongIndex + 1) % songs.length;\n    setCurrentSongIndex(nextIndex);\n  };\n\n  const handlePreviousSong = () => {\n    const previousIndex = (currentSongIndex - 1 + songs.length) % songs.length;\n    setCurrentSongIndex(previousIndex);\n  };\n\n  const handleTimeUpdate = () => {\n    const currentTime = audioRef.current.currentTime;\n    const duration = audioRef.current.duration;\n    const progressPercentage = (currentTime / duration) * 100;\n    if (!isSeeking) {\n      setProgress(progressPercentage);\n    }\n  };\n\n  const handleSeek = (e) => {\n    const seekTime = (e.target.value / 100) * audioRef.current.duration;\n    audioRef.current.currentTime = seekTime;\n    setProgress(e.target.value);\n  };\n\n  const handleSeekStart = () => {\n    setIsSeeking(true);\n  };\n\n  const handleSeekEnd = () => {\n    setIsSeeking(false);\n  };\n\n  const handleSongEnd = () => {\n    handleNextSong();\n  };\n\n  const handleVolumeIconClick = (e) => {\n    if (volumeSliderRef.current?.contains(e.target)) {\n      return;\n    }\n    setIsVolumeSliderVisible(!isVolumeSliderVisible);\n  };\n\n  const handleVolume = (e) => {\n    const newVolume = Number(e.target.value);\n    audioRef.current.volume = newVolume / 100;\n    setVolume(newVolume);\n  };\n\n  return (\n    <motion.div\n      className=\"music-player-container\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <motion.div\n        className=\"music-player\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <motion.div\n          className=\"volume-control\"\n          whileHover={{ scale: 1 }}\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <motion.div\n            className=\"volume-icon\"\n            onClick={handleVolumeIconClick}\n            onMouseLeave={() => setIsVolumeSliderVisible(false)}\n            onMouseEnter={() => setIsVolumeSliderVisible(true)}\n            whileHover={{ scale: 1 }}\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            {volume === 0 ? (\n              <MdVolumeMute size={24} />\n            ) : volume <= 50 ? (\n              <MdVolumeDown size={24} />\n            ) : (\n              <MdVolumeUp size={24} />\n            )}\n\n            {isVolumeSliderVisible && (\n              <motion.div\n                className=\"volume-slider-container\"\n                initial={{ opacity: 0, scale: 0.5 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.5 }}\n                transition={{ duration: 0.3 }}\n              >\n                <input\n                  ref={volumeSliderRef}\n                  type=\"range\"\n                  className=\"volume-slider\"\n                  value={volume}\n                  min=\"0\"\n                  max=\"100\"\n                  onChange={handleVolume}\n                />\n              </motion.div>\n            )}\n          </motion.div>\n        </motion.div>\n        <div className=\"song-info\">\n          <div className=\"song-title\">{currentSong.title}</div>\n          <input\n            type=\"range\"\n            className=\"progress-bar\"\n            value={progress}\n            max=\"100\"\n            onChange={handleSeek}\n            onMouseDown={handleSeekStart}\n            onMouseUp={handleSeekEnd}\n          />\n        </div>\n        <div className=\"controls\">\n          <button onClick={handlePreviousSong}>\n            <MdSkipPrevious />\n          </button>\n          <button onClick={handlePlayPause}>\n            {isPlaying ? <MdPause /> : <MdPlayArrow />}\n          </button>\n          <button onClick={handleNextSong}>\n            <MdSkipNext />\n          </button>\n        </div>\n      </motion.div>\n\n      <audio\n        ref={audioRef}\n        autoPlay={isPlaying}\n        onTimeUpdate={handleTimeUpdate}\n        onEnded={handleSongEnd}\n        volume={volume / 100}\n      />\n    </motion.div>\n  );\n};\n\nexport default MusicPlayer;\n"],"names":["MusicPlayer","audioRef","useRef","volumeSliderRef","isPlaying","setIsPlaying","useState","currentSongIndex","setCurrentSongIndex","currentSong","setCurrentSong","progress","setProgress","isSeeking","setIsSeeking","volume","setVolume","isVolumeSliderVisible","setIsVolumeSliderVisible","songs","useMemo","title","source","BoleritoStapelia","Frio","Girasoles","Limonero","MariposaOrigami","Oceanica","useEffect","current","src","handleNextSong","nextIndex","length","_jsxs","motion","div","className","initial","opacity","y","animate","transition","duration","children","_jsx","whileHover","scale","onClick","e","_volumeSliderRef$curr","contains","target","onMouseLeave","onMouseEnter","MdVolumeMute","size","MdVolumeDown","MdVolumeUp","exit","ref","type","value","min","max","onChange","newVolume","Number","seekTime","currentTime","onMouseDown","handleSeekStart","onMouseUp","handleSeekEnd","handlePreviousSong","previousIndex","MdSkipPrevious","handlePlayPause","pause","play","MdPause","MdPlayArrow","MdSkipNext","autoPlay","onTimeUpdate","handleTimeUpdate","onEnded","handleSongEnd"],"sourceRoot":""}